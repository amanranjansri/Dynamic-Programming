#include <bits/stdc++.h> 

int solve(vector<int>& weight, vector<int>& value, int n, int maxweight, vector<vector<int>>& dp) 
{
	//base case
	if(n == 0)
	{
		if(weight[0] <= maxweight)
		{
			return value[0];
		}
		else
		{
			return 0;
		}
	}
	
	//step -3
	if(dp[n][maxweight] != -1)
	{
		return dp[n][maxweight];
	}

	//recursive call
	 
	 int include = 0;
	 
	 if(weight[n] <= maxweight)
	 {
		include = value[n] + solve(weight, value, n-1, maxweight - weight[n],dp);
	 }
	 int exclude = 0 + solve(weight, value, n-1, maxweight,dp);

	 //step -2
	 dp[n][maxweight] = max(include, exclude);
	 return dp[n][maxweight];

}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	//step -1
	vector<vector<int>> dp(n, vector<int> (maxWeight+1,-1));

    return solve(weight, value, n-1, maxWeight,dp);
}
